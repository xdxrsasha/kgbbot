from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ContextTypes
import random
import sqlite3
import time
from datetime import datetime, timedelta
from collections import defaultdict

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
conn = sqlite3.connect('kgb_data.db', check_same_thread=False)
c = conn.cursor()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    c.execute('''CREATE TABLE IF NOT EXISTS players
                 (user_id INTEGER PRIMARY KEY, money INTEGER, businesses TEXT, houses TEXT, cars TEXT, phones TEXT, planes TEXT, yachts TEXT,
                  helicopters TEXT, mines TEXT, xp INTEGER, level INTEGER, unlocked_ores TEXT, resources TEXT, quests TEXT, energy INTEGER,
                  rating INTEGER, bitcoin REAL, deposit INTEGER, last_bonus TEXT, nickname TEXT, status TEXT, treasury INTEGER)''')
    conn.commit()

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
player_cache = defaultdict(dict)

def load_player(user_id):
    if user_id in player_cache:
        return player_cache[user_id].copy()
    c.execute("SELECT money, businesses, houses, cars, phones, planes, yachts, helicopters, mines, xp, level, unlocked_ores, resources, quests, energy, rating, bitcoin, deposit, last_bonus, nickname, status, treasury FROM players WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    if result:
        player = {
            "user_id": user_id, "money": result[0], "businesses": eval(result[1]) if result[1] else [], "houses": eval(result[2]) if result[2] else [],
            "cars": eval(result[3]) if result[3] else [], "phones": eval(result[4]) if result[4] else [], "planes": eval(result[5]) if result[5] else [],
            "yachts": eval(result[6]) if result[6] else [], "helicopters": eval(result[7]) if result[7] else [], "mines": eval(result[8]) if result[8] else [],
            "xp": result[9] or 0, "level": result[10] or 1, "unlocked_ores": eval(result[11]) if result[11] else ["Copper", "Iron"],
            "resources": eval(result[12]) if result[12] else {"Wood": 0, "Stone": 0}, "quests": eval(result[13]) if result[13] else [],
            "energy": result[14] or 100, "rating": result[15] or 0, "bitcoin": result[16] or 0.0, "deposit": result[17] or 0,
            "last_bonus": result[18], "nickname": result[19], "status": result[20], "treasury": result[21] or 0
        }
    else:
        player = {
            "user_id": user_id, "money": 0, "businesses": [], "houses": [], "cars": [], "phones": [], "planes": [], "yachts": [],
            "helicopters": [], "mines": [], "xp": 0, "level": 1, "unlocked_ores": ["Copper", "Iron"],
            "resources": {"Wood": 0, "Stone": 0}, "quests": [],
            "energy": 100, "rating": 0, "bitcoin": 0.0, "deposit": 0, "last_bonus": None, "nickname": f"User_{user_id}", "status": "–û–±—ã—á–Ω—ã–π",
            "treasury": 0
        }
        save_player(user_id, player)
    player_cache[user_id] = player.copy()
    return player.copy()

def load_player_by_nickname(nickname):
    c.execute("SELECT user_id, money, businesses, houses, cars, phones, planes, yachts, helicopters, mines, xp, level, unlocked_ores, resources, quests, energy, rating, bitcoin, deposit, last_bonus, nickname, status, treasury FROM players WHERE nickname = ?", (nickname,))
    result = c.fetchone()
    if result:
        user_id = result[0]
        if user_id in player_cache:
            return player_cache[user_id].copy()
        player = {
            "user_id": user_id, "money": result[1], "businesses": eval(result[2]) if result[2] else [], "houses": eval(result[3]) if result[3] else [],
            "cars": eval(result[4]) if result[4] else [], "phones": eval(result[5]) if result[5] else [], "planes": eval(result[6]) if result[6] else [],
            "yachts": eval(result[7]) if result[7] else [], "helicopters": eval(result[8]) if result[8] else [], "mines": eval(result[9]) if result[9] else [],
            "xp": result[10] or 0, "level": result[11] or 1, "unlocked_ores": eval(result[12]) if result[12] else ["Copper", "Iron"],
            "resources": eval(result[13]) if result[13] else {"Wood": 0, "Stone": 0}, "quests": eval(result[14]) if result[14] else [],
            "energy": result[15] or 100, "rating": result[16] or 0, "bitcoin": result[17] or 0.0, "deposit": result[18] or 0,
            "last_bonus": result[19], "nickname": result[20], "status": result[21], "treasury": result[22] or 0
        }
        player_cache[user_id] = player.copy()
        return player.copy()
    return None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
def save_player(user_id, data):
    c.execute("INSERT OR REPLACE INTO players (user_id, money, businesses, houses, cars, phones, planes, yachts, helicopters, mines, xp, level, unlocked_ores, resources, quests, energy, rating, bitcoin, deposit, last_bonus, nickname, status, treasury) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
              (user_id, data["money"], str(data["businesses"]), str(data["houses"]), str(data["cars"]), str(data["phones"]), str(data["planes"]),
               str(data["yachts"]), str(data["helicopters"]), str(data["mines"]), data["xp"], data["level"], str(data["unlocked_ores"]),
               str(data["resources"]), str(data["quests"]), data["energy"], data["rating"], data["bitcoin"], data["deposit"], data["last_bonus"],
               data["nickname"], data["status"], data["treasury"]))
    conn.commit()
    player_cache[user_id] = data.copy()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
def check_level_up(data):
    xp_needed = data["level"] * 100
    if data["xp"] >= xp_needed:
        data["level"] += 1
        data["money"] += 500
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å {data['level']}! +$500."
    return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    data = load_player(user_id)
    text = update.message.text.lower()
    words = text.split()

    if "–±–æ—Å—Å" in text:
        await update.message.reply_text("üòé –î–∞, –±–æ—Å—Å? –ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?")
    elif "—Å—Ç–∞—Ç—É—Å" in text:
        level_up_msg = check_level_up(data)
        if level_up_msg:
            await update.message.reply_text(level_up_msg)
            save_player(user_id, data)
        await update.message.reply_text(f"üí∞ –î–µ–Ω—å–≥–∏: ${data['money']}\nüéØ –£—Ä–æ–≤–µ–Ω—å: {data['level']}\n‚≠ê –û–ø—ã—Ç: {data['xp']}\nüè¢ –ë–∏–∑–Ω–µ—Å—ã: {len(data['businesses'])}\nüè† –î–æ–º–∞: {len(data['houses'])}\nüöó –ú–∞—à–∏–Ω—ã: {len(data['cars'])}")
    elif "—Å—Ç–∞—Ç—É—Å —Ç–∏–ø" in text:
        await update.message.reply_text(f"üé© –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {data['status']}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ VIP-—Å—Ç–∞—Ç—É—Å—ã: –ó–æ–ª–æ—Ç–æ–π ($1000), –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π ($5000), –ê–ª–º–∞–∑–Ω—ã–π ($10000).")
    elif "–∫—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å" in text and len(words) >= 2:
        new_status = words[1]
        vip_statuses = {"–ó–æ–ª–æ—Ç–æ–π": 1000, "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π": 5000, "–ê–ª–º–∞–∑–Ω—ã–π": 10000}
        if new_status not in vip_statuses:
            await update.message.reply_text("üò¢ –¢–∞–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç! –í—ã–±–µ—Ä–∏: –ó–æ–ª–æ—Ç–æ–π, –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π, –ê–ª–º–∞–∑–Ω—ã–π.")
            return
        price = vip_statuses[new_status]
        if data["money"] < price:
            await update.message.reply_text(f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ ${price}, —É —Ç–µ–±—è ${data['money']}.")
            return
        data["money"] -= price
        data["status"] = new_status
        await update.message.reply_text(f"üéâ –ö—É–ø–ª–µ–Ω —Å—Ç–∞—Ç—É—Å {new_status} –∑–∞ ${price}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${data['money']}.")
        save_player(user_id, data)
    elif "–∫—É–ø–∏—Ç—å" in text and len(words) == 2 and words[1] in ["business", "house", "car", "phone", "plane", "yacht", "helicopter"]:
        type_ = words[1]
        prices = {"business": 500, "house": 1000, "car": 800, "phone": 300, "plane": 5000, "yacht": 10000, "helicopter": 8000}
        if data["money"] < prices[type_]:
            await update.message.reply_text(f"üò¢ –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${prices[type_] - data['money']}, –ª–æ—Ö!")
            return
        data["money"] -= prices[type_]
        if type_ == "business":
            data["businesses"].append(f"Business_{len(data['businesses'])+1}")
        elif type_ == "house":
            data["houses"].append(f"House_{len(data['houses'])+1}")
        elif type_ == "car":
            data["cars"].append(f"Car_{len(data['cars'])+1}")
        elif type_ == "phone":
            data["phones"].append(f"Phone_{len(data['phones'])+1}")
        elif type_ == "plane":
            data["planes"].append(f"Plane_{len(data['planes'])+1}")
        elif type_ == "yacht":
            data["yachts"].append(f"Yacht_{len(data['yachts'])+1}")
        elif type_ == "helicopter":
            data["helicopters"].append(f"Helicopter_{len(data['helicopters'])+1}")
        await update.message.reply_text(f"üéÅ –ö—É–ø–ª–µ–Ω–æ {type_}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${data['money']}.")
        save_player(user_id, data)
    elif "–∫–æ–ø–∞—Ç—å" in text and len(words) >= 2:
        ore_name = words[1].capitalize()
        if data["energy"] < 10:
            await update.message.reply_text("‚ö° –≠–Ω–µ—Ä–≥–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –æ—Ç–¥–æ—Ö–Ω–∏!")
            return
        if not data["mines"]:
            await update.message.reply_text("‚õè –£ —Ç–µ–±—è –Ω–µ—Ç —à–∞—Ö—Ç, –∏–¥–∏ —Ä–∞–∑–±–µ—Ä–∏—Å—å, –¥–∞—É–Ω!")
            return
        ores = {
            "Copper": {"xp": 10, "chance": 0.5, "value": 100, "req_xp": 0},
            "Iron": {"xp": 20, "chance": 0.3, "value": 250, "req_xp": 0},
            "Gold": {"xp": 500, "chance": 0.15, "value": 1000, "req_xp": 150},
            "Diamond": {"xp": 1000, "chance": 0.05, "value": 5000, "req_xp": 300},
            "Platinum": {"xp": 5000, "chance": 0.02, "value": 20000, "req_xp": 1000},
            "Titan": {"xp": 50000, "chance": 0.005, "value": 100000, "req_xp": 5000},
            "Uranium": {"xp": 100000, "chance": 0.001, "value": 500000, "req_xp": 10000}
        }
        if ore_name not in ores or ore_name not in data["unlocked_ores"]:
            await update.message.reply_text(f"üíé –†—É–¥—ã {ore_name} –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞! –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(data['unlocked_ores'])}")
            return
        if random.random() < ores[ore_name]["chance"]:
            earnings = ores[ore_name]["value"]
            xp_gain = ores[ore_name]["xp"]
            data["money"] += earnings
            data["xp"] += xp_gain
            data["energy"] -= 10
            await update.message.reply_text(f"‚õè –î–æ–±—ã—Ç–æ {ore_name}! +${earnings} –∏ +{xp_gain} –æ–ø—ã—Ç–∞. –≠–Ω–µ—Ä–≥–∏—è: {data['energy']}/100.")
            level_up_msg = check_level_up(data)
            if level_up_msg:
                await update.message.reply_text(level_up_msg)
            for ore, ore_data in ores.items():
                if ore not in data["unlocked_ores"] and data["xp"] >= ore_data["req_xp"]:
                    data["unlocked_ores"].append(ore)
                    await update.message.reply_text(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è —Ä—É–¥–∞: {ore}! –¢—Ä–µ–±—É–µ—Ç—Å—è {ore_data['req_xp']} –æ–ø—ã—Ç–∞.")
        else:
            data["energy"] -= 10
            await update.message.reply_text(f"üò¢ {ore_name} –Ω–µ –¥–æ–±—ã—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë! –≠–Ω–µ—Ä–≥–∏—è: {data['energy']}/100.")
        save_player(user_id, data)
    elif "—Ä–µ—Å—É—Ä—Å—ã" in text:
        if data["energy"] < 5:
            await update.message.reply_text("‚ö° –≠–Ω–µ—Ä–≥–∏—è –Ω–∏–∑–∫–∞—è, –æ—Ç–¥–æ—Ö–Ω–∏!")
            return
        if not data["mines"]:
            await update.message.reply_text("‚õè –£ —Ç–µ–±—è –Ω–µ—Ç —à–∞—Ö—Ç –¥–ª—è –∞–≤—Ç–æ—Å–±–æ—Ä–∞, –¥–∞—É–Ω!")
            return
        data["resources"]["Wood"] += random.randint(10, 50)
        data["resources"]["Stone"] += random.randint(5, 30)
        money_earned = random.randint(50, 200)
        data["money"] += money_earned
        data["energy"] -= 5
        await update.message.reply_text(f"üå≤ –ê–≤—Ç–æ—Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤: +{data['resources']['Wood']} Wood, +{data['resources']['Stone']} Stone, +${money_earned}. –≠–Ω–µ—Ä–≥–∏—è: {data['energy']}/100.")
        save_player(user_id, data)
    elif "–∫–≤–µ—Å—Ç—ã" in text:
        if not data["quests"]:
            data["quests"] = [{"name": "–°–æ–±–µ—Ä–∏ 100 Wood", "goal": 100, "progress": 0, "reward": 200}]
        quest = data["quests"][0]
        if quest["progress"] >= quest["goal"]:
            data["money"] += quest["reward"]
            data["quests"] = []
            await update.message.reply_text(f"üéØ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! +${quest['reward']}. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${data['money']}.")
        else:
            await update.message.reply_text(f"üéÆ –ö–≤–µ—Å—Ç: {quest['name']}. –ü—Ä–æ–≥—Ä–µ—Å—Å: {quest['progress']}/{quest['goal']}.")
    elif text == "/help":
        await update.message.reply_text(
            "üí° –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "üí∞ —Å—Ç–∞—Ç—É—Å - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤—ã\n"
            "üé© —Å—Ç–∞—Ç—É—Å —Ç–∏–ø - –ü–æ–∫–∞–∑–∞—Ç—å VIP-—Å—Ç–∞—Ç—É—Å—ã\n"
            "üí∏ –∫—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å - –ö—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å (–ó–æ–ª–æ—Ç–æ–π/–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π/–ê–ª–º–∞–∑–Ω—ã–π)\n"
            "üéÅ –∫—É–ø–∏—Ç—å —Ç–∏–ø - –ö—É–ø–∏—Ç—å (business/house/car/phone/plane/yacht/helicopter)\n"
            "‚õè –∫–æ–ø–∞—Ç—å [—Ä—É–¥–∞] - –î–æ–±—ã—Ç—å —Ä—É–¥—É\n"
            "üå≤ —Ä–µ—Å—É—Ä—Å—ã - –ê–≤—Ç–æ—Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤\n"
            "üéÆ –∫–≤–µ—Å—Ç—ã - –ü–æ–∫–∞–∑–∞—Ç—å –∫–≤–µ—Å—Ç—ã\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ\n"
            "üí∏ –± - –ë–∞–ª–∞–Ω—Å\n"
            "üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
            "üíé –∫—É—Ä—Å —Ä—É–¥—ã - –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å —Ä—É–¥\n"
            "üí∞ –æ–≥—Ä–∞–±–∏—Ç—å –∫–∞–∑–Ω—É - –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–∫—Ä–∞—Å—Ç—å –∏–∑ –∫–∞–∑–Ω—ã\n"
            "üè¶ –±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å/—Å–Ω—è—Ç—å —Å—É–º–º–∞/–≤—Å—ë - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–º\n"
            "üíº –¥–µ–ø–æ–∑–∏—Ç –ø–æ–ª–æ–∂–∏—Ç—å/—Å–Ω—è—Ç—å —Å—É–º–º–∞/–≤—Å—ë - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–º\n"
            "üéÅ –¥–∞—Ç—å (–Ω–∏–∫) —Å—É–º–º–∞ - –ü–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏\n"
            "‚Çø –±–∏—Ç–∫–æ–∏–Ω –∫—É—Ä—Å/–∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –∫–æ–ª-–≤–æ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏\n"
            "‚Çø –±–∏—Ç–∫–æ–∏–Ω—ã - –ü–æ–∫–∞–∑–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã\n"
            "üéÅ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n"
            "üè¶ –∫–∞–∑–Ω–∞ - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∑–Ω—É\n"
            "üë§ —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫\n"
            "üë§ –º–æ–π –Ω–∏–∫ - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫\n"
            "üéñ –º–æ–π —Å—Ç–∞—Ç—É—Å - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "üéñ —Å—Ç–∞—Ç—É—Å—ã - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã\n"
            "üèÜ —Ä–µ–π—Ç–∏–Ω–≥ - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥\n"
            "üí∏ –ø—Ä–æ–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ - –ü—Ä–æ–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥\n"
            "‚ö° —ç–Ω–µ—Ä–≥–∏—è - –ü–æ–∫–∞–∑–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é\n"
            "‚õè —à–∞—Ö—Ç–∞ - –ü–æ–∫–∞–∑–∞—Ç—å —à–∞—Ö—Ç—ã\n"
            "üöó –º–∞—à–∏–Ω—ã - –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—ã\n"
            "üì± —Ç–µ–ª–µ—Ñ–æ–Ω—ã - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã\n"
            "‚úà —Å–∞–º–æ–ª—ë—Ç—ã - –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–º–æ–ª—ë—Ç—ã\n"
            "üè† –¥–æ–º–∞ - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–º–∞\n"
            "‚õµ —è—Ö—Ç—ã - –ü–æ–∫–∞–∑–∞—Ç—å —è—Ö—Ç—ã\n"
            "üöÅ –≤–µ—Ä—Ç–æ–ª—ë—Ç—ã - –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Ç–æ–ª—ë—Ç—ã\n"
            "üé∞ –∫–∞–∑–∏–Ω–æ —Å—É–º–º–∞ - –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ"
        )
    elif "–±" in text:
        await update.message.reply_text(f"üí∏ –ë–∞–ª–∞–Ω—Å: ${data['money']}")
    elif "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å" in text:
        await update.message.reply_text(f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: –ë–∏–∑–Ω–µ—Å—ã: {len(data['businesses'])}, –î–æ–º–∞: {len(data['houses'])}, –ú–∞—à–∏–Ω—ã: {len(data['cars'])}, –¢–µ–ª–µ—Ñ–æ–Ω—ã: {len(data['phones'])}, –°–∞–º–æ–ª—ë—Ç—ã: {len(data['planes'])}, –Ø—Ö—Ç—ã: {len(data['yachts'])}, –í–µ—Ä—Ç–æ–ª—ë—Ç—ã: {len(data['helicopters'])}")
    elif "–∫—É—Ä—Å —Ä—É–¥—ã" in text:
        ores = {"Copper": 100, "Iron": 250, "Gold": 1000, "Diamond": 5000, "Platinum": 20000, "Titan": 100000, "Uranium": 500000}
        await update.message.reply_text(f"üíé –ö—É—Ä—Å —Ä—É–¥: {', '.join(f'{ore}: ${value}' for ore, value in ores.items())}")
    elif "–æ–≥—Ä–∞–±–∏—Ç—å –∫–∞–∑–Ω—É" in text:
        if data["energy"] < 50:
            await update.message.reply_text("‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è!")
            return
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
            stolen = min(1000, data["treasury"])
            data["money"] += stolen
            data["treasury"] -= stolen
            data["energy"] -= 50
            await update.message.reply_text(f"üí∞ –£—Å–ø–µ—à–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ! +${stolen}. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${data['money']}. –≠–Ω–µ—Ä–≥–∏—è: {data['energy']}/100.")
        else:
            data["energy"] -= 50
            await update.message.reply_text(f"üò¢ –ü—Ä–æ–≤–∞–ª –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è! –≠–Ω–µ—Ä–≥–∏—è: {data['energy']}/100.")
        save_player(user_id, data)
    elif "–±–∞–Ω–∫" in text and len(words) >= 2:
        action = words[1]
        if action in ["–ø–æ–ª–æ–∂–∏—Ç—å", "—Å–Ω—è—Ç—å"] and len(words) >= 3:
            amount = words[2]
            if amount == "–≤—Å—ë":
                amount = data["money"] if action == "–ø–æ–ª–æ–∂–∏—Ç—å" else data["deposit"]
            else:
                try:
                    amount = int(amount)
                except ValueError:
                    await update.message.reply_text("üí° –í–≤–µ–¥–∏ —Å—É–º–º—É –∏–ª–∏ '–≤—Å—ë'!")
                    return
            if action == "–ø–æ–ª–æ–∂–∏—Ç—å":
                if data["money"] < amount:
                    await update.message.reply_text("üò¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
                    return
                data["money"] -= amount
                data["deposit"] += amount
                await update.message.reply_text(f"üè¶ –ü–æ–ª–æ–∂–µ–Ω–æ ${amount} –≤ –±–∞–Ω–∫. –ë–∞–ª–∞–Ω—Å: ${data['money']}, –î–µ–ø–æ–∑–∏—Ç: ${data['deposit']}.")
            elif action == "—Å–Ω—è—Ç—å":
                if data["deposit"] < amount:
                    await update.message.reply_text("üò¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ!")
                    return
                data["deposit"] -= amount
                data["money"] += amount
                await update.message.reply_text(f"üè¶ –°–Ω—è—Ç–æ ${amount} –∏–∑ –±–∞–Ω–∫–∞. –ë–∞–ª–∞–Ω—Å: ${data['money']}, –î–µ–ø–æ–∑–∏—Ç: ${data['deposit']}.")
            save_player(user_id, data)
    elif "–¥–µ–ø–æ–∑–∏—Ç" in text and len(words) >= 2:
        action = words[1]
        if action in ["–ø–æ–ª–æ–∂–∏—Ç—å", "—Å–Ω—è—Ç—å"] and len(words) >= 3:
            amount = words[2]
            if amount == "–≤—Å—ë":
                amount = data["money"] if action == "–ø–æ–ª–æ–∂–∏—Ç—å" else data["deposit"]
            else:
                try:
                    amount = int(amount)
                except ValueError:
                    await update.message.reply_text("üí° –í–≤–µ–¥–∏ —Å—É–º–º—É –∏–ª–∏ '–≤—Å—ë'!")
                    return
            if action == "–ø–æ–ª–æ–∂–∏—Ç—å":
                if data["money"] < amount:
                    await update.message.reply_text("üò¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
                    return
                data["money"] -= amount
                data["deposit"] += amount
                await update.message.reply_text(f"üíº –ü–æ–ª–æ–∂–µ–Ω–æ ${amount} –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç. –ë–∞–ª–∞–Ω—Å: ${data['money']}, –î–µ–ø–æ–∑–∏—Ç: ${data['deposit']}.")
            elif action == "—Å–Ω—è—Ç—å":
                if data["deposit"] < amount:
                    await update.message.reply_text("üò¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ!")
                    return
                data["deposit"] -= amount
                data["money"] += amount
                await update.message.reply_text(f"üíº –°–Ω—è—Ç–æ ${amount} —Å –¥–µ–ø–æ–∑–∏—Ç–∞. –ë–∞–ª–∞–Ω—Å: ${data['money']}, –î–µ–ø–æ–∑–∏—Ç: ${data['deposit']}.")
            save_player(user_id, data)
    elif "–¥–∞—Ç—å" in text and len(words) >= 3:
        recipient_nick = words[1]
        try:
            amount = int(words[2])
            if amount > data["money"]:
                await update.message.reply_text("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ, –ª–æ—Ö!")
                return
            recipient = load_player_by_nickname(recipient_nick)
            if not recipient:
                await update.message.reply_text(f"üë§ –ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–æ–º {recipient_nick} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            data["money"] -= amount
            recipient["money"] += amount
            save_player(user_id, data)
            save_player(recipient["user_id"], recipient)
            await update.message.reply_text(f"üéÅ –ü–µ—Ä–µ–¥–∞–Ω–æ ${amount} –∏–≥—Ä–æ–∫—É {recipient_nick}. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${data['money']}.")
        except ValueError:
            await update.message.reply_text("üí° –í–≤–µ–¥–∏ —Å—É–º–º—É –ø–æ—Å–ª–µ –Ω–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '–¥–∞—Ç—å User123 500'!")
    elif "–±–∏—Ç–∫–æ–∏–Ω" in text and len(words) >= 2:
        if words[1] == "–∫—É—Ä—Å":
            await update.message.reply_text(f"‚Çø –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: $50000 (—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å).")
        elif words[1] == "–∫—É–ø–∏—Ç—å" and len(words) == 3:
            try:
                amount = float(words[2])
                price = amount * 50000
                if data["money"] < price:
                    await update.message.reply_text(f"üò¢ –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${price - data['money']}!")
                    return
                data["money"] -= price
                data["bitcoin"] += amount
                await update.message.reply_text(f"‚Çø –ö—É–ø–ª–µ–Ω–æ {amount} BTC –∑–∞ ${price}. –ë–∞–ª–∞–Ω—Å: ${data['money']}, BTC: {data['bitcoin']}.")
                save_player(user_id, data)
            except ValueError:
                await update.message.reply_text("üí° –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC, –Ω–∞–ø—Ä–∏–º–µ—Ä '–±–∏—Ç–∫–æ–∏–Ω –∫—É–ø–∏—Ç—å 0.1'!")
        elif words[1] == "–ø—Ä–æ–¥–∞—Ç—å" and len(words) == 3:
            try:
                amount = float(words[2])
                if data["bitcoin"] < amount:
                    await update.message.reply_text("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ BTC!")
                    return
                price = amount * 50000
                data["bitcoin"] -= amount
                data["money"] += price
                await update.message.reply_text(f"‚Çø –ü—Ä–æ–¥–∞–Ω–æ {amount} BTC –∑–∞ ${price}. –ë–∞–ª–∞–Ω—Å: ${data['money']}, BTC: {data['bitcoin']}.")
                save_player(user_id, data)
            except ValueError:
                await update.message.reply_text("üí° –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC, –Ω–∞–ø—Ä–∏–º–µ—Ä '–±–∏—Ç–∫–æ–∏–Ω –ø—Ä–æ–¥–∞—Ç—å 0.1'!")
        elif words[1] == "–±–∏—Ç–∫–æ–∏–Ω—ã":
            await update.message.reply_text(f"‚Çø –ë–∏—Ç–∫–æ–∏–Ω—ã: {data['bitcoin']} BTC")
    elif "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å" in text:
        now = datetime.now()
        if data["last_bonus"] and (now - datetime.fromisoformat(data["last_bonus"]).days < 1):
            await update.message.reply_text("‚è∞ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞!")
            return
        bonus = random.randint(100, 500)
        data["money"] += bonus
        data["last_bonus"] = now.isoformat()
        await update.message.reply_text(f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +${bonus}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${data['money']}.")
        save_player(user_id, data)
    elif "–∫–∞–∑–Ω–∞" in text:
        await update.message.reply_text(f"üè¶ –ö–∞–∑–Ω–∞: ${data['treasury']}")
    elif "—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫" in text and len(words) >= 2:
        new_nick = " ".join(words[1:])
        if len(new_nick) > 20:
            await update.message.reply_text("üò¢ –ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)!")
            return
        data["nickname"] = new_nick
        await update.message.reply_text(f"üë§ –ù–æ–≤—ã–π –Ω–∏–∫: {new_nick}")
        save_player(user_id, data)
    elif "–º–æ–π –Ω–∏–∫" in text:
        await update.message.reply_text(f"üë§ –¢–≤–æ–π –Ω–∏–∫: {data['nickname']}")
    elif "–º–æ–π —Å—Ç–∞—Ç—É—Å" in text:
        await update.message.reply_text(f"üéñ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å: {data['status']}")
    elif "—Å—Ç–∞—Ç—É—Å—ã" in text:
        await update.message.reply_text("üéñ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: –ó–æ–ª–æ—Ç–æ–π ($1000), –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π ($5000), –ê–ª–º–∞–∑–Ω—ã–π ($10000).")
    elif "—Ä–µ–π—Ç–∏–Ω–≥" in text:
        await update.message.reply_text(f"üèÜ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {data['rating']}")
    elif "–ø—Ä–æ–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥" in text and len(words) == 2:
        try:
            amount = int(words[1])
            if data["rating"] < amount:
                await update.message.reply_text("üò¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–∞!")
                return
            data["rating"] -= amount
            data["money"] += amount * 10
            await update.message.reply_text(f"üí∞ –ü—Ä–æ–¥–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥ {amount} –∑–∞ ${amount * 10}. –¢–µ–ø–µ—Ä—å —Ä–µ–π—Ç–∏–Ω–≥: {data['rating']}, –¥–µ–Ω—å–≥–∏: ${data['money']}.")
            save_player(user_id, data)
        except ValueError:
            await update.message.reply_text("üí° –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Ç–∏–Ω–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '–ø—Ä–æ–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ 50'!")
    elif "—ç–Ω–µ—Ä–≥–∏—è" in text:
        await update.message.reply_text(f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {data['energy']}/100")
    elif "—à–∞—Ö—Ç–∞" in text:
        await update.message.reply_text(f"‚õè –®–∞—Ö—Ç—ã: {len(data['mines'])}")
    elif "–º–∞—à–∏–Ω—ã" in text:
        await update.message.reply_text(f"üöó –ú–∞—à–∏–Ω—ã: {', '.join(data['cars']) or '–ü—É—Å—Ç–æ'}")
    elif "—Ç–µ–ª–µ—Ñ–æ–Ω—ã" in text:
        await update.message.reply_text(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã: {', '.join(data['phones']) or '–ü—É—Å—Ç–æ'}")
    elif "—Å–∞–º–æ–ª—ë—Ç—ã" in text:
        await update.message.reply_text(f"‚úà –°–∞–º–æ–ª—ë—Ç—ã: {', '.join(data['planes']) or '–ü—É—Å—Ç–æ'}")
    elif "–¥–æ–º–∞" in text:
        await update.message.reply_text(f"üè† –î–æ–º–∞: {', '.join(data['houses']) or '–ü—É—Å—Ç–æ'}")
    elif "—è—Ö—Ç—ã" in text:
        await update.message.reply_text(f"‚õµ –Ø—Ö—Ç—ã: {', '.join(data['yachts']) or '–ü—É—Å—Ç–æ'}")
    elif "–≤–µ—Ä—Ç–æ–ª—ë—Ç—ã" in text:
        await update.message.reply_text(f"üöÅ –í–µ—Ä—Ç–æ–ª—ë—Ç—ã: {', '.join(data['helicopters']) or '–ü—É—Å—Ç–æ'}")
    elif "–∫–∞–∑–∏–Ω–æ" in text and len(words) == 2:
        try:
            bet = int(words[1])
            if data["money"] < bet:
                await update.message.reply_text("üò¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
                return
            data["money"] -= bet
            if random.random() < 0.5:
                win = bet * 2
                data["money"] += win
                await update.message.reply_text(f"üé∞ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +${win}. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${data['money']}.")
            else:
                await update.message.reply_text(f"üé∞ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${bet}. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${data['money']}.")
            save_player(user_id, data)
        except ValueError:
            await update.message.reply_text("üí° –í–≤–µ–¥–∏ —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä '–∫–∞–∑–∏–Ω–æ 100'!")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç —Å —Ä—É–¥–∞–º–∏, –±–∏–∑–Ω–µ—Å–æ–º –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
TOKEN = os.environ.get('TOKEN')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–∫–∞–∂–∏ TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

app = Application.builder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def run():
    port = int(os.environ.get('PORT', 10000))
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )

if __name__ == "__main__":
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    run()
